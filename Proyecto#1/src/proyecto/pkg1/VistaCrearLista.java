/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.pkg1;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Sthephan
 */
public class VistaCrearLista extends javax.swing.JFrame {

    private static Charset UTF8 = Charset.forName("UTF-8");
    public static String nombreUsuario;
    public static boolean primeraLista = false;
    
    /**
     * Creates new form VistaCrearLista
     */
    public VistaCrearLista() {
        initComponents();
        ImageIcon im = new ImageIcon(Proyecto1.logo.getPath());
        Image image = im.getImage(); // transform it 
        Image newimg = image.getScaledInstance(60, 60,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        im = new ImageIcon(newimg);
        labelImage.setIcon(im);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelImage = new javax.swing.JLabel();
        labelNombreLista = new javax.swing.JLabel();
        labelDescripcion = new javax.swing.JLabel();
        txtNombreLista = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        btnCrear = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelImage.setText("Aplicacion MEIA - Creacion de Lista");

        labelNombreLista.setText("Nombre de Lista: ");

        labelDescripcion.setText("Descripcion: ");

        btnCrear.setText("Crear Lista");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCrear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelImage)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelNombreLista)
                                    .addComponent(labelDescripcion))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombreLista)
                                    .addComponent(txtDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImage)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombreLista)
                    .addComponent(txtNombreLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDescripcion)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrear)
                    .addComponent(btnSalir))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        String errorMessage = "";
        int cont = 0;
        if((txtNombreLista.getText().equals("")) || (txtDescripcion.getText().equals(""))){
            JOptionPane.showMessageDialog(null, "Alguno de los campos en la creacion de Lista se encuentra vacio, por favor revise que haya llenado todos los campos", "InfoBox: " + "Error en creacion de Lista", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
            Lista ls = new Lista();
            if(!(txtNombreLista.getText().toCharArray().length > 30)){
                ls.setNombreLista(txtNombreLista.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño del nombre de la lista a excedido la longitud de 30 caracteres";
            }
            if(!(txtDescripcion.getText().toCharArray().length > 40)){
                ls.setDescripcion(txtDescripcion.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño de la descripcion de la lista a excedido la longitud de 40 caracteres";
            }
            ls.setUsuario(nombreUsuario.toCharArray());
            ls.setFechaCreacion(new Date());
            ls.setNumeroUsuarios(0);
            ls.setEstatus(true);
            if(cont > 0){
                JOptionPane.showMessageDialog(null, errorMessage, "InfoBox: " + "Error en creacion de Lista", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                if(existeLista(String.valueOf(ls.getNombreLista()))){
                    JOptionPane.showMessageDialog(null, "El nombre de lista ingresado ya existe para este usuario dentro de las listas almacenadas", "InfoBox: " + "Error en creacion de Lista", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                Date ahora = new Date();
                if(primeraLista){
                    try{
                        escribirLista(Proyecto1.bitacoraLista, ls);
                        escribirDescriptor(Proyecto1.descBitacoraLista, new DescUsuario_Lista("bitacora_Lista", ahora, nombreUsuario, ahora, nombreUsuario, 1, 1, 0, 5));
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
                else{
                    try{
                        DescUsuario_Lista des = leerDescriptor(Proyecto1.descBitacoraLista);
                        if(des.getNumRegistros() < des.getMaxReorganizacion()){
                            escribirLista(Proyecto1.bitacoraLista, ls);
                            limpiarArchivo(Proyecto1.descBitacoraLista);
                            escribirDescriptor(Proyecto1.descBitacoraLista, new DescUsuario_Lista(des.getNombreSimbolico(), des.getFechaCreacion(), des.getUsuarioCreacion(), new Date(), nombreUsuario, des.getNumRegistros() + 1, des.getRegistrosActivos() + 1, des.getRegistrosInactivos(), des.getMaxReorganizacion()));
                        }
                        else{
                            LinkedList<Lista> bitLista = leerListas(Proyecto1.bitacoraLista);
                            LinkedList<Lista> masLista = leerListas(Proyecto1.maestroLista);
                            int contA = 0;
                            int contI = 0;
                            LinkedList<Lista> nuevoMasLista = new LinkedList<>();
                            if(masLista.size() > 0){
                                for(int i = 0; i < bitLista.size(); i++){
                                    if(bitLista.get(i).isEstatus()){
                                        contA++;
                                        nuevoMasLista.add(bitLista.get(i));
                                    }
                                    else{
                                        contI++;
                                    }
                                }
                                for(int i = 0; i < masLista.size(); i++){
                                    if(masLista.get(i).isEstatus()){
                                        contA++;
                                        nuevoMasLista.add(masLista.get(i));
                                    }
                                    else{
                                        contI++;
                                    }
                                }
                                Collections.sort(nuevoMasLista, new ListComparator());
                                limpiarArchivo(Proyecto1.maestroLista);
                                for(int i = 0; i < nuevoMasLista.size(); i++){
                                    escribirLista(Proyecto1.maestroLista, nuevoMasLista.get(i));
                                }
                                DescUsuario_Lista desM = leerDescriptor(Proyecto1.descMaestroLista);
                                limpiarArchivo(Proyecto1.descMaestroLista);
                                escribirDescriptor(Proyecto1.descMaestroLista, new DescUsuario_Lista(desM.getNombreSimbolico(), desM.getFechaCreacion(), desM.getUsuarioCreacion(), new Date(), nombreUsuario, desM.getNumRegistros() + bitLista.size(), contA, 0, desM.getMaxReorganizacion()));
                                limpiarArchivo(Proyecto1.bitacoraLista);
                                escribirLista(Proyecto1.bitacoraLista, ls);
                                DescUsuario_Lista desB = leerDescriptor(Proyecto1.descBitacoraLista);
                                limpiarArchivo(Proyecto1.descBitacoraLista);
                                escribirDescriptor(Proyecto1.descBitacoraLista, new DescUsuario_Lista(desB.getNombreSimbolico(), desB.getFechaCreacion(), desB.getUsuarioCreacion(), new Date(), nombreUsuario, 1, 1, 0, desB.getMaxReorganizacion()));
                            }
                            else{
                                Date ahora2 = new Date();
                                for(int i = 0; i < bitLista.size(); i++){
                                    if(bitLista.get(i).isEstatus()){
                                        contA++;
                                        nuevoMasLista.add(bitLista.get(i));
                                    }
                                    else{
                                        contI++;
                                    }
                                }
                                Collections.sort(nuevoMasLista, new ListComparator());
                                for(int i = 0; i < nuevoMasLista.size(); i++){
                                    escribirLista(Proyecto1.maestroLista, nuevoMasLista.get(i));
                                }
                                escribirDescriptor(Proyecto1.descMaestroLista, new DescUsuario_Lista("maestro_Lista", ahora2, nombreUsuario, ahora2, nombreUsuario, nuevoMasLista.size(), contA, 0, -1));
                                limpiarArchivo(Proyecto1.bitacoraLista);
                                escribirLista(Proyecto1.bitacoraLista, ls);
                                DescUsuario_Lista desB = leerDescriptor(Proyecto1.descBitacoraLista);
                                limpiarArchivo(Proyecto1.descBitacoraLista);
                                escribirDescriptor(Proyecto1.descBitacoraLista, new DescUsuario_Lista(desB.getNombreSimbolico(), desB.getFechaCreacion(), desB.getUsuarioCreacion(), new Date(), nombreUsuario, 1, 1, 0, desB.getMaxReorganizacion()));                                
                            }
                        }
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
                dispose();
                if(primeraLista){
                    primeraLista = false;
                }
                JOptionPane.showMessageDialog(null, "Lista creada Exitosamente", "InfoBox: " + "Mensaje del Sistema", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCrearActionPerformed

    /**
     * Boton que cierra la ventana de creacion de lista
     * @param evt 
     */
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * Funcion booleana que verifica que una lista del usuario actual exista en la bitacora normal o maestra de listas
     * @param lista nombre de usuario por el que se buscara
     * @return valor booleano de si existe o no el usuario buscado
     */
    public boolean existeLista(String lista){
        boolean val = false;
        BufferedReader br = null;
	FileReader fr = null;
        BufferedReader br2 = null;
	FileReader fr2 = null;
	try {
            fr = new FileReader(Proyecto1.bitacoraLista);
            br = new BufferedReader(fr);
            String line = "";
            while ((line = br.readLine()) != null) {
                if(line.contains(nombreUsuario)){
                    if(line.contains(lista)){
                        val = true;
                        return val;
                    }
                }
                else{
                    line = br.readLine();
                }
            }
            fr.close();
            br.close();
            fr2 = new FileReader(Proyecto1.maestroLista);
            br2 = new BufferedReader(fr2);
            line = "";
            while ((line = br2.readLine()) != null) {
                if(line.contains(nombreUsuario)){
                    if(line.contains(lista)){
                        val = true;
                        return val;
                    }
                }
                else{
                    line = br2.readLine();
                }
            }
            fr2.close();
            br2.close();
	} catch (IOException e) {
            e.printStackTrace();
	}
        return val;
    }
    
    /**
     * Metodo que limpia el contenido de un archivo
     * @param archivo archivo al que se le limpiara el contenido
     * @throws IOException 
     */
    public void limpiarArchivo(File archivo)throws IOException{
        PrintWriter writer = new PrintWriter(archivo);
        writer.print("");
        writer.close();
    }
    
    /**
     * Funcion que lee el contenido del descriptor de la bitacora de usuarios
     * @param archivo Archivo del descriptor que se va a leer
     * @return informacion leida del descriptor
     * @throws IOException 
     */
    public DescUsuario_Lista leerDescriptor(File archivo) throws IOException{
        DescUsuario_Lista desc = null;
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
        BufferedReader br = null;
	FileReader fr = null;
	fr = new FileReader(archivo);
        br = new BufferedReader(fr);
        StringBuilder texto = new StringBuilder();
        int line = 0;
        while ((line = br.read()) != -1) {
            char val = (char)line;
            texto.append(val);
        }
        fr.close();
        br.close();
        if(texto.toString().equals("")){
            return desc;
        }
        else{
            try{
                String[] contenido = texto.toString().split("\\|");
                desc = new DescUsuario_Lista(contenido[0], date.parse(contenido[1]), contenido[2], date.parse(contenido[3]), contenido[4], Integer.parseInt(contenido[5]), Integer.parseInt(contenido[6]), Integer.parseInt(contenido[7]), Integer.parseInt(contenido[8]));
            }catch(Exception e){
                e.printStackTrace();
            }
            return desc;
        }
    }
    
    /**
     * Metodo que escribe al descriptor de usuario 
     * @param archivo informacion que se escribira
     * @param des archivo al que se escribira
     * @throws IOException 
     */
    public void escribirDescriptor(File archivo, DescUsuario_Lista des) throws IOException{
        String texto = "";
        String div = "|";
        texto += des.getNombreSimbolico();
        texto += div;
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
        texto += date.format(des.getFechaCreacion());
        texto += div;
        texto += des.getUsuarioCreacion();
        texto += div;
        texto += date.format(des.getFechaModificacion());
        texto += div;
        texto += des.getUsuarioModificacion();
        texto += div;
        texto += des.getNumRegistros();
        texto += div;
        texto += des.getRegistrosActivos();
        texto += div;
        texto += des.getRegistrosInactivos();
        texto += div;
        texto += des.getMaxReorganizacion();
        FileOutputStream fos = new FileOutputStream(archivo, true);
        fos.write(texto.getBytes());
        fos.flush();
        fos.close();
    }
    
    /**
     * Funcion que completa una cadena hasta un limite determinado con el caracter especial "~"
     * @param texto texto original sin agregar caracteres especiales
     * @param limite numero limite para agregar caracteres especiales
     * @return texto con caracteres especiales
     */
    public String completarTexto(String texto, int limite){
        while(texto.length() < limite){
            texto += "~";
        }
        return texto;
    }
    
    /**
     * Funcion que remueve los caracteres especiales "~" de una cadena 
     * @param texto cadena a la que se la van a remover los caracteres especiales
     * @return texto sin caracteres especiales
     */
    public String quitarExtra(String texto){
        int cont = 0;
        for(int i = 0; i < texto.length(); i++){
            if(texto.charAt(i) == '~'){
                cont++;
            }
        }
        int pos = texto.length() - cont;
        texto = texto.substring(0, pos);
        return texto;
    }
    
    /**
     * Metodo que escribe una entrada a la bitacora o maestro de listas
     * @param archivo File al que se escribira la entrada
     * @param s Lista con la iformacion para la entrada
     * @throws IOException 
     */
    public void escribirLista(File archivo, Lista s) throws IOException{
        String texto = "";
        String div = "|";
        String fin = "\r\n";
        String txtCompleto = "";
        texto += completarTexto(String.valueOf(s.getNombreLista()), 30);
        texto += div;
        texto += completarTexto(String.valueOf(s.getUsuario()), 20);
        texto += div;
        texto += completarTexto(String.valueOf(s.getDescripcion()), 40);
        texto += div;
        if(s.getNumeroUsuarios() < 10){
            texto += "0";
            texto += s.getNumeroUsuarios();
        }
        else{
            texto += s.getNumeroUsuarios();
        }
        texto += div;
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
        texto += date.format(s.getFechaCreacion());
        texto += div;
        if(s.isEstatus()){
            //Esta activo
            texto += "1";
        }
        else{
            //Esta Inactivo
            texto += "0";
        }
        texto += fin;
        if(archivo.exists()){
            FileOutputStream fos = new FileOutputStream(archivo, true);
            Writer wr = new OutputStreamWriter(fos, UTF8);
            wr.write(texto);
            wr.flush();
            wr.close();
            fos.close();
        }
    }
    
    /**
     * Funcion que lee las listas del archivo enviado 
     * @param fileName archivo en el que se buscan los usuarios
     * @return lista con las listas encontrados en el archivo
     * @throws IOException 
     */
    public LinkedList<Lista> leerListas(File fileName) throws IOException{
        LinkedList<Lista> ls = new LinkedList<>();
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
        BufferedReader br = null;
	FileReader fr = null;
	fr = new FileReader(fileName);
        br = new BufferedReader(fr);
        StringBuilder texto = new StringBuilder();
        int line = 0;
        while ((line = br.read()) != -1) {
            char val = (char)line;
            texto.append(val);
        }
        fr.close();
        br.close();
        if(texto.toString().equals("")){
            return ls;
        }
        else{
            String[] contenido = texto.toString().split("\\r?\\n");
            for(int i = 0; i < contenido.length; i++){
                try{
                    String[] listas = contenido[i].split("\\|");
                    Lista lis = new Lista();
                    lis.setNombreLista(quitarExtra(listas[0]).toCharArray());
                    lis.setUsuario(quitarExtra(listas[1]).toCharArray());
                    lis.setDescripcion(quitarExtra(listas[2]).toCharArray());
                    lis.setNumeroUsuarios(Integer.parseInt(listas[3]));
                    lis.setFechaCreacion(date.parse(listas[4]));
                    if(listas[5].equals("1")){
                        lis.setEstatus(true);
                    }
                    else{
                        lis.setEstatus(false);
                    }
                    ls.add(lis);
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
            return ls;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaCrearLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaCrearLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaCrearLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaCrearLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaCrearLista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel labelDescripcion;
    private javax.swing.JLabel labelImage;
    private javax.swing.JLabel labelNombreLista;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombreLista;
    // End of variables declaration//GEN-END:variables
}
