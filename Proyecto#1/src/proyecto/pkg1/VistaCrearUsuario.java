/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.pkg1;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Sthephan
 */
public class VistaCrearUsuario extends javax.swing.JFrame {

    /**
     * Creates new form VistaCrearUsuario
     */
    private static Charset UTF8 = Charset.forName("UTF-8");
    File archivo1 = new File("C:\\MEIA\\puntuacion.txt");
    File archivo2 = new File("C:\\MEIA\\resultado.txt");
    File rutaFoto = new File("C:\\MEIA\\Imagenes");
    static ArrayList<Integer> valores = new ArrayList<Integer>();
    static ArrayList<Integer> criterio = new ArrayList<Integer>();
    public static boolean firstUser = false;
    public static String admin;
    
    public VistaCrearUsuario() {
        initComponents();
        if(firstUser){
            chbAdministrador.setSelected(true);
            chbAdministrador.setEnabled(false);
            chbUsuario.setEnabled(false);
        }
        ImageIcon im = new ImageIcon(Proyecto1.logo.getPath());
        Image image = im.getImage(); // transform it 
        Image newimg = image.getScaledInstance(60, 60,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        im = new ImageIcon(newimg);
        labelImage.setIcon(im);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelUsuario = new javax.swing.JLabel();
        labelNombre = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        labelApellido = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        labelContraseña = new javax.swing.JLabel();
        txtContraseña = new javax.swing.JPasswordField();
        chbAdministrador = new javax.swing.JCheckBox();
        chbUsuario = new javax.swing.JCheckBox();
        labelRol = new javax.swing.JLabel();
        labelFechaN = new javax.swing.JLabel();
        txtFechaNacimiento = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        labelCorreo = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        labelTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        labelFoto = new javax.swing.JLabel();
        labelPathFoto = new javax.swing.JLabel();
        btnBuscarFoto = new javax.swing.JButton();
        btnCrearusuario = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        labelImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelUsuario.setText("Nombre de Usuario");

        labelNombre.setText("Nombre:");

        labelApellido.setText("Apellido:");

        labelContraseña.setText("Contraseña:");

        chbAdministrador.setText("Administrador");

        chbUsuario.setText("Usuario");

        labelRol.setText("Rol:");

        labelFechaN.setText("Fecha de Nacimiento:");

        jLabel1.setText("Formato: numDia/numMes/numAño");

        labelCorreo.setText("Correo Electronico:");

        labelTelefono.setText("Telefono:");

        labelFoto.setText("Foto:");

        btnBuscarFoto.setText("Buscar");
        btnBuscarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFotoActionPerformed(evt);
            }
        });

        btnCrearusuario.setText("Crear");
        btnCrearusuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearusuarioActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");

        labelImage.setText("Aplicacion MEIA - Creacion de Usuario");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelUsuario)
                            .addComponent(labelNombre)
                            .addComponent(labelApellido)
                            .addComponent(labelContraseña)
                            .addComponent(labelRol))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chbAdministrador)
                                .addGap(18, 18, 18)
                                .addComponent(chbUsuario))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtUsuario)
                                .addComponent(txtNombre)
                                .addComponent(txtApellido)
                                .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelFechaN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCorreo)
                            .addComponent(labelTelefono)
                            .addComponent(labelFoto))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBuscarFoto)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCorreo)
                                .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPathFoto)))
                    .addComponent(btnCrearusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelImage))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsuario)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelApellido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelContraseña)
                    .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbAdministrador)
                    .addComponent(chbUsuario)
                    .addComponent(labelRol))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFechaN)
                    .addComponent(txtFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCorreo)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTelefono)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFoto)
                    .addComponent(btnBuscarFoto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelPathFoto)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearusuario)
                    .addComponent(btnSalir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo de creacion de nuevo usuario
     * @param evt 
     */
    private void btnCrearusuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearusuarioActionPerformed
        String errorMessage = "";
        int cont = 0;
        if((txtUsuario.getText().equals("")) || (txtNombre.getText().equals("")) || (txtApellido.getText().equals("")) || (txtContraseña.getPassword().length == 0) || (txtCorreo.getText().equals("")) || (txtFechaNacimiento.getText().equals("")) || (txtTelefono.getText().equals("")) || ((chbAdministrador.isSelected()) && (chbUsuario.isSelected())) || (labelPathFoto.getText().equals(""))){
            JOptionPane.showMessageDialog(null, "Alguno de los campos en la creacion de usuario se encuentra vacio, por favor revise que haya llenado todos los campos", "InfoBox: " + "Error en creacion de Usuario", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy");
            Usuario us = new Usuario();
            if(!(txtNombre.getText().toCharArray().length > 30)){
                us.setNombre(txtNombre.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño del nombre a excedido la longitud de 30 caracteres";
            }
            if(!(txtUsuario.getText().toCharArray().length > 20)){
                us.setNombreDeUsuario(txtUsuario.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño del nombre de usuario a excedido la longitud de 20 caracteres";
            }
            if(!(txtApellido.getText().toCharArray().length > 30)){
                us.setApellido(txtApellido.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño del apellido a excedido la longitud de 30 caracteres";
            }
            if(!(txtContraseña.getPassword().length > 40)){
                if(!(calcularSeguridad(txtContraseña.getPassword()).equals("Contraseña Insegura"))){
                    us.setPassword(txtContraseña.getPassword());
                }
                else{
                    cont++;
                errorMessage += "\nEl de seguridad de la contraseña es demasiado bajo (Contraseña Insegura)";
                }
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño de la contraseña a excedido la longitud de 40 caracteres";
            }
            if(!(txtCorreo.getText().toCharArray().length > 40)){
                us.setCorreoAlterno(txtCorreo.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño del correo a excedido la longitud de 40 caracteres";
            }
            if(!(txtTelefono.getText().length() != 8)){
                try{
                    us.setTelefono(Integer.parseInt(txtTelefono.getText()));
                }catch(Exception e){
                    e.printStackTrace();
                    cont++;
                    errorMessage += "\nEl numero de telefono contiene caracteres erroneos";
                }
            }
            else{
                cont++;
                errorMessage += "\nEl numero de telefono no cumple los parametros necasarios";
            }
            if((chbAdministrador.isSelected() == true) && (chbUsuario.isSelected() == true)){
                cont++;
                errorMessage += "\nDebe seleccionar unicamente una opcion, administrador o usuario";
            }
            else{
                if(chbAdministrador.isSelected()){
                    us.rol = true;
                }
                if(chbUsuario.isSelected()){
                    us.rol = false;
                }
            }
            if(!(labelPathFoto.getText().toCharArray().length > 200)){
                us.setPathFotografia(labelPathFoto.getText().toCharArray());
            }
            else{
                cont++;
                errorMessage += "\nEl tamaño de la ubicacion de la fotografia a excedido la longitud de 200 caracteres";
            }
            try{
                us.setFechaNacimiento(date.parse(txtFechaNacimiento.getText()));
            }catch(Exception e){
                cont++;
                errorMessage += "\nEl fomrato de fecha ingresada es incorrecto";
            }
            us.setEstatus(true);
            if(cont > 0){
                JOptionPane.showMessageDialog(null, errorMessage, "InfoBox: " + "Error en creacion de Usuario", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                if(existeUsuario(String.valueOf(us.getNombreDeUsuario()))){
                    JOptionPane.showMessageDialog(null, "El nombre de usuario ingresado ya existe dentro de los usuarios almacenados", "InfoBox: " + "Error en creacion de Usuario", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                Date ahora = new Date();
                if(firstUser){
                    admin = String.valueOf(us.getNombreDeUsuario());
                    try{
                        escribirUsuarioBitacora(Proyecto1.bitacoraUsuario, us);
                        escribirDescriptor(Proyecto1.descBitacoraUsuario, new DescUsuario("bitacora_Usuario", ahora, admin, ahora, admin, 1, 1, 0, 5));
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
                else{
                    try{
                        DescUsuario des = leerDescriptor(Proyecto1.descBitacoraUsuario);
                        if(des.getNumRegistros() < des.getMaxReorganizacion()){
                            escribirUsuarioBitacora(Proyecto1.bitacoraUsuario, us);
                            PrintWriter writer = new PrintWriter(Proyecto1.descBitacoraUsuario);
                            writer.print("");
                            writer.close();
                            escribirDescriptor(Proyecto1.descBitacoraUsuario, new DescUsuario(des.getNombreSimbolico(), des.getFechaCreacion(), des.getUsuarioCreacion(), new Date(), admin, des.getNumRegistros() + 1, des.getRegistrosActivos() + 1, des.getRegistrosInactivos(), des.getMaxReorganizacion()));
                            
                        }
                        else{
                            LinkedList<Usuario> bitUsuario = leerUsuarios(Proyecto1.bitacoraUsuario);
                            LinkedList<Usuario> masUsuario = leerUsuarios(Proyecto1.maestroUsuario);
                            int contA = 0;
                            int contI = 0;
                            LinkedList<Usuario> nuevoMasUsuario = new LinkedList<>();
                            if(masUsuario.size() > 0){
                                for(int i = 0; i < bitUsuario.size(); i++){
                                    nuevoMasUsuario.add(bitUsuario.get(i));
                                    if(bitUsuario.get(i).isEstatus()){
                                        contA++;
                                    }
                                    else{
                                        contI++;
                                    }
                                }
                                for(int i = 0; i < masUsuario.size(); i++){
                                    nuevoMasUsuario.add(masUsuario.get(i));
                                    if(masUsuario.get(i).isEstatus()){
                                        contA++;
                                    }
                                    else{
                                        contI++;
                                    }
                                }
                                Collections.sort(nuevoMasUsuario, new StringComparator());
                                limpiarArchivo(Proyecto1.maestroUsuario);
                                for(int i = 0; i < nuevoMasUsuario.size(); i++){
                                    escribirUsuarioBitacora(Proyecto1.maestroUsuario, nuevoMasUsuario.get(i));
                                }
                                DescUsuario desM = leerDescriptor(Proyecto1.descMaestroUsuario);
                                limpiarArchivo(Proyecto1.descMaestroUsuario);
                                escribirDescriptor(Proyecto1.descMaestroUsuario, new DescUsuario(desM.getNombreSimbolico(), desM.getFechaCreacion(), desM.getUsuarioCreacion(), new Date(), admin, desM.getNumRegistros() + bitUsuario.size(), contA, contI, desM.getMaxReorganizacion()));
                                limpiarArchivo(Proyecto1.bitacoraUsuario);
                                escribirUsuarioBitacora(Proyecto1.bitacoraUsuario, us);
                                DescUsuario desB = leerDescriptor(Proyecto1.descBitacoraUsuario);
                                limpiarArchivo(Proyecto1.descBitacoraUsuario);
                                escribirDescriptor(Proyecto1.descBitacoraUsuario, new DescUsuario(desB.getNombreSimbolico(), desB.getFechaCreacion(), desB.getUsuarioCreacion(), new Date(), admin, 1, 1, 0, desB.getMaxReorganizacion()));
                            }
                            else{
                                Date ahora2 = new Date();
                                for(int i = 0; i < bitUsuario.size(); i++){
                                    nuevoMasUsuario.add(bitUsuario.get(i));
                                    if(bitUsuario.get(i).isEstatus()){
                                        contA++;
                                    }
                                    else{
                                        contI++;
                                    }
                                }
                                Collections.sort(nuevoMasUsuario, new StringComparator());
                                for(int i = 0; i < nuevoMasUsuario.size(); i++){
                                    escribirUsuarioBitacora(Proyecto1.maestroUsuario, nuevoMasUsuario.get(i));
                                }
                                escribirDescriptor(Proyecto1.descMaestroUsuario, new DescUsuario("maestro_Usuario", ahora2, admin, ahora2, admin, nuevoMasUsuario.size(), contA, contI, -1));
                                limpiarArchivo(Proyecto1.bitacoraUsuario);
                                escribirUsuarioBitacora(Proyecto1.bitacoraUsuario, us);
                                DescUsuario desB = leerDescriptor(Proyecto1.descBitacoraUsuario);
                                limpiarArchivo(Proyecto1.descBitacoraUsuario);
                                escribirDescriptor(Proyecto1.descBitacoraUsuario, new DescUsuario(desB.getNombreSimbolico(), desB.getFechaCreacion(), desB.getUsuarioCreacion(), new Date(), admin, 1, 1, 0, desB.getMaxReorganizacion()));
                            }
                        }
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
                dispose();
                if(firstUser){
                    VistaLogin v = new VistaLogin();
                    v.setVisible(true);
                    firstUser = false;
                }
                JOptionPane.showMessageDialog(null, "Usuario creado Exitosamente", "InfoBox: " + "Mensaje del Sistema", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCrearusuarioActionPerformed

    /**
     * Funcion booleana que verifica que un usuario exista en la bitacora normal o maestra de usuarios
     * @param usuario nombre de usuario por el que se buscara
     * @return valor booleano de si existe o no el usuario buscado
     */
    public boolean existeUsuario(String usuario){
        boolean val = false;
        BufferedReader br = null;
	FileReader fr = null;
        BufferedReader br2 = null;
	FileReader fr2 = null;
	try {
            fr = new FileReader(Proyecto1.bitacoraUsuario);
            br = new BufferedReader(fr);
            StringBuilder texto = new StringBuilder();
            int line = 0;
            while ((line = br.read()) != -1) {
                char valu = (char)line;
                texto.append(valu);
            }
            if(texto.toString().contains(usuario)){
                val = true;
                return val;
            }
            fr.close();
            br.close();
            texto = new StringBuilder();
            fr2 = new FileReader(Proyecto1.maestroUsuario);
            br2 = new BufferedReader(fr2);
            line = 0;
            while ((line = br2.read()) != -1) {
                char valu = (char)line;
                texto.append(valu);
            }
            if(texto.toString().contains(usuario)){
                val = true;
                return val;
            }
            fr2.close();
            br2.close();
	} catch (IOException e) {
            e.printStackTrace();
	}
        return val;
    }
    
    /**
     * Metodo que limpia el contenido de un archivo
     * @param archivo archivo al que se le limpiara el contenido
     * @throws IOException 
     */
    public void limpiarArchivo(File archivo)throws IOException{
        PrintWriter writer = new PrintWriter(archivo);
        writer.print("");
        writer.close();
    }
    
    /**
     * Funcion que lee el contenido del descriptor de la bitacora de usuarios
     * @param archivo Archivo del descriptor que se va a leer
     * @return informacion leida del descriptor
     * @throws IOException 
     */
    public DescUsuario leerDescriptor(File archivo) throws IOException{
        DescUsuario desc = null;
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
        BufferedReader br = null;
	FileReader fr = null;
	fr = new FileReader(archivo);
        br = new BufferedReader(fr);
        StringBuilder texto = new StringBuilder();
        int line = 0;
        while ((line = br.read()) != -1) {
            char val = (char)line;
            texto.append(val);
        }
        fr.close();
        br.close();
        if(texto.toString().equals("")){
            return desc;
        }
        else{
            try{
                String[] contenido = texto.toString().split("\\|");
                desc = new DescUsuario(contenido[0], date.parse(contenido[1]), contenido[2], date.parse(contenido[3]), contenido[4], Integer.parseInt(contenido[5]), Integer.parseInt(contenido[6]), Integer.parseInt(contenido[7]), Integer.parseInt(contenido[8]));
            }catch(Exception e){
                e.printStackTrace();
            }
            return desc;
        }
    }
    
    /**
     * Funcion que lee los usuarios del archivo enviado 
     * @param fileName archivo en el que se buscan los usuarios
     * @return lista con los usuarios encontrados en el archivo
     * @throws IOException 
     */
    public LinkedList<Usuario> leerUsuarios(File fileName) throws IOException{
        LinkedList<Usuario> us = new LinkedList<>();
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy");
        BufferedReader br = null;
	FileReader fr = null;
	fr = new FileReader(fileName);
        br = new BufferedReader(fr);
        StringBuilder texto = new StringBuilder();
        int line = 0;
        while ((line = br.read()) != -1) {
            char val = (char)line;
            texto.append(val);
        }
        fr.close();
        br.close();
        if(texto.toString().equals("")){
            return us;
        }
        else{
            String[] contenido = texto.toString().split("\\r?\\n");
            for(int i = 0; i < contenido.length; i++){
                try{
                    String[] usuario = contenido[i].split("\\|");
                    Usuario usu = new Usuario();
                    usu.setNombreDeUsuario(quitarExtra(usuario[0]).toCharArray());
                    usu.setNombre(quitarExtra(usuario[1]).toCharArray());
                    usu.setApellido(quitarExtra(usuario[2]).toCharArray());
                    usu.setPassword(quitarExtra(usuario[3]).toCharArray());
                    if(usuario[4].equals("1")){
                        usu.setRol(true);
                    }
                    else{
                        usu.setRol(false);
                    }
                    usu.setFechaNacimiento(date.parse(usuario[5]));
                    usu.setCorreoAlterno(quitarExtra(usuario[6]).toCharArray());
                    usu.setTelefono(Integer.parseInt(usuario[7]));
                    usu.setPathFotografia(quitarExtra(usuario[8]).toCharArray());
                    if(usuario[9].equals("1")){
                        usu.setEstatus(true);
                    }
                    else{
                        usu.setEstatus(false);
                    }
                    us.add(usu);
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
            return us;
        }
    }
    
    /**
     * Metodo que escribe al descriptor de usuario 
     * @param archivo informacion que se escribira
     * @param des archivo al que se escribira
     * @throws IOException 
     */
    public void escribirDescriptor(File archivo, DescUsuario des) throws IOException{
        String texto = "";
        String div = "|";
        texto += des.getNombreSimbolico();
        texto += div;
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
        texto += date.format(des.getFechaCreacion());
        texto += div;
        texto += des.getUsuarioCreacion();
        texto += div;
        texto += date.format(des.getFechaModificacion());
        texto += div;
        texto += des.getUsuarioModificacion();
        texto += div;
        texto += des.getNumRegistros();
        texto += div;
        texto += des.getRegistrosActivos();
        texto += div;
        texto += des.getRegistrosInactivos();
        texto += div;
        texto += des.getMaxReorganizacion();
        FileOutputStream fos = new FileOutputStream(archivo, true);
        fos.write(texto.getBytes());
        fos.flush();
        fos.close();
    }
    
    /**
     * Funcion que completa una cadena hasta un limite determinado con el caracter especial "~"
     * @param texto texto original sin agregar caracteres especiales
     * @param limite numero limite para agregar caracteres especiales
     * @return texto con caracteres especiales
     */
    public String completarTexto(String texto, int limite){
        while(texto.length() < limite){
            texto += "~";
        }
        return texto;
    }
    
    /**
     * Funcion que remueve los caracteres especiales "~" de una cadena 
     * @param texto cadena a la que se la van a remover los caracteres especiales
     * @return texto sin caracteres especiales
     */
    public String quitarExtra(String texto){
        int cont = 0;
        for(int i = 0; i < texto.length(); i++){
            if(texto.charAt(i) == '~'){
                cont++;
            }
        }
        int pos = texto.length() - cont;
        texto = texto.substring(0, pos);
        return texto;
    }
    
    /**
     * Funcion que encripta la contraseña recibida con md5
     * @param source texto con la contraseña a encriptar
     * @return contraseña encriptada
     */
    public String encriptarContraseña(String source){
        String md5 = null;
        try{
            MessageDigest mdEnc = MessageDigest.getInstance("MD5");
            mdEnc.update(source.getBytes(), 0, source.length());
            md5 = new BigInteger(1, mdEnc.digest()).toString(16);
        }catch(Exception e){
            e.printStackTrace();
        }
        return md5;
    }
    
    /**
     * Metodo que escribe una entrada a la bitacora de usuarios
     * @param archivo File al que se escribira la entrada
     * @param s Usuario con la iformacion para la entrada
     * @throws IOException 
     */
    public void escribirUsuarioBitacora(File archivo, Usuario s) throws IOException{
        String texto = "";
        String div = "|";
        String fin = "\r\n";
        String txtCompleto = "";
        texto += completarTexto(String.valueOf(s.getNombreDeUsuario()), 20);
        texto += div;
        texto += completarTexto(String.valueOf(s.getNombre()), 30);
        texto += div;
        texto += completarTexto(String.valueOf(s.getApellido()), 30);
        texto += div;
        texto += completarTexto(encriptarContraseña(String.valueOf(s.getPassword())), 40);
        texto += div;
        if(s.isRol()){
            //Es un Admimnistrador
            texto += "1";
        }
        else{
            //Es un usuario
            texto += "0";
        }
        texto += div;
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy");
        texto += date.format(s.getFechaNacimiento());
        texto += div;
        texto += completarTexto(String.valueOf(s.getCorreoAlterno()), 40);
        texto += div;
        texto += s.getTelefono();
        texto += div;
        texto += completarTexto(String.valueOf(s.getPathFotografia()), 200);
        texto += div;
        if(s.isEstatus()){
            //Esta activo
            texto += "1";
        }
        else{
            //Esta Inactivo
            texto += "0";
        }
        texto += fin;
        if(archivo.exists()){
            FileOutputStream fos = new FileOutputStream(archivo, true);
            Writer wr = new OutputStreamWriter(fos, UTF8);
            wr.write(texto);
            wr.flush();
            wr.close();
            fos.close();
        }
    }
    
    /**
     * Boton de busqueda de foto en para usuario
     * @param evt 
     */
    private void btnBuscarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFotoActionPerformed
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imagen files", ImageIO.getReaderFileSuffixes());
        File ficheroImagen;
        String rutaArchivo;
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) 
        {
            ficheroImagen = dialogo.getSelectedFile();
            rutaArchivo = ficheroImagen.getPath();
            String name = ficheroImagen.getName();
            rutaFoto.mkdirs();
            File foto = new File(rutaFoto, name);
            try{
                copiarArchivo(ficheroImagen, foto);
            }catch(Exception e){
                e.printStackTrace();
            }
            labelPathFoto.setText(foto.getPath());
        }
    }//GEN-LAST:event_btnBuscarFotoActionPerformed
    
    /**
     * Metodo de copia de archivos 
     * @param source File del archivo original
     * @param dest File del archivo de destino
     * @throws IOException 
     */
    private static void copiarArchivo(File source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } finally {
            is.close();
            os.close();
        }
    }
    
    /**
     * Metodo que lee los parametros para la verificacion de seguridad de la contraseña
     */
    public void leerParametrosContraseña(){
        FileReader puntuacion;
        FileReader resultado;
            try{
                puntuacion = new FileReader(archivo1);
                BufferedReader lectura = new BufferedReader(puntuacion);
                String linea;
                try{
                    linea = lectura.readLine();
                    while(linea != null){
                        valores.add(Integer.parseInt(linea));
                        linea = lectura.readLine();
                    }
                }catch(Exception e){
                    e.printStackTrace();
                }
                puntuacion.close();
                lectura.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            
            try{
                resultado = new FileReader(archivo2);
                BufferedReader lectura2 = new BufferedReader(resultado);
                String linea2;
                String[] split = null;
                try{
                    linea2 = lectura2.readLine();
                    while(linea2 != null){
                        if(!"".equals(linea2)){
                            split = linea2.split(",");
                        }
                        criterio.add(Integer.parseInt(split[0]));
                        criterio.add(Integer.parseInt(split[1]));
                        linea2 = lectura2.readLine();
                    }
                }catch(Exception e){
                    e.printStackTrace();
                }
                lectura2.close();
                resultado.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            
    }
    
    /**
     * Funcion que mide el grado de seguridad de una contraseña
     * @param password contraseña a la que se le verificara el nivel de seguridad
     * @return nivel de seguridad de la contraseña
     */
    public String calcularSeguridad(char[] password){
        leerParametrosContraseña();
        String contraseña = "";
        for(int i = 0; i < password.length; i++){
            contraseña += Character.toString(password[i]);
        }
        int puntos = 0;
        String mensaje = "";
        if(contraseña.length() < valores.get(0)){
            mensaje = ("La contraseña debe ser mayor a "+valores.get(0).toString() + " caracteres \n porfavor ingrese nuevamente una contraseña");
        }
        else{
            puntos += valores.get(1)*contraseña.length();
            puntos += valores.get(2)*calcularMayus(contraseña);
            puntos += valores.get(3)*calcularLetras(contraseña);
            puntos += valores.get(4)*calcularNumeros(contraseña);
            puntos += (calcularSimbolos(contraseña)*(contraseña.length()+valores.get(5)));
            if(calcularLetras(contraseña) == contraseña.length()){
                puntos = puntos - valores.get(6);
            }
            if(calcularNumeros(contraseña) == contraseña.length()){
                puntos = puntos - valores.get(7);
            }
            if((puntos >= criterio.get(0)) && (puntos <= criterio.get(1))){
            mensaje = "Contraseña Insegura";
            }
            if((puntos >= criterio.get(2)) && (puntos <= criterio.get(3))){
                mensaje = "Contraseña poco Segura";
            }
            if((puntos >= criterio.get(4)) && (puntos <= criterio.get(5))){
                mensaje = "Contraseña Segura";
            }
            if((puntos >= criterio.get(6)) && (puntos <= criterio.get(7))){
                mensaje = "Contraseña muy Segura";
            }
        }
        return mensaje;
    }
    
    /**
     * Funcion de calculo de numero de letras mayusculas en un texto
     * @param contraseña texto del que se hara el calculo
     * @return numero de mayusculas en el texto
     */
    public int calcularMayus(String contraseña){
        int cont = 0;
        for(int i = 0; i < contraseña.length(); i++){
            if(Character.isUpperCase(contraseña.charAt(i))){
                cont++;
            }             
        }
        return cont;
    }
    
    /**
     * Funcion de calculo de numero de letras en un texto
     * @param contraseña texto del que se hara el calculo
     * @return numero de letras en el texto
     */
    public int calcularLetras(String contraseña){
        int cont = 0;
        for(int i = 0; i < contraseña.length(); i++){
            if(Character.isLetter(contraseña.charAt(i))){
                cont++;
            }             
        }
        return cont;
    }
    
    /**
     * Funcion de calculo de numero de digitos en un texto
     * @param contraseña texto del que se hara el calculo
     * @return numero de digitos en el texto
     */
    public int calcularNumeros(String contraseña){
        int cont = 0;
        for(int i = 0; i < contraseña.length(); i++){
            if(Character.isDigit(contraseña.charAt(i))){
                cont++;
            }             
        }
        return cont;
    }
    
    /**
     * Funcion de calculo de numero de simbolos en un texto
     * @param contraseña texto del que se hara el calculo
     * @return numero de simbolos en el texto
     */
    public int calcularSimbolos(String contraseña){
        int cont = 0;
        for(int i = 0; i < contraseña.length(); i++){
            if((Character.valueOf(contraseña.charAt(i)).equals('/')) || (Character.valueOf(contraseña.charAt(i)).equals('¿')) || (Character.valueOf(contraseña.charAt(i)).equals('?')) || (Character.valueOf(contraseña.charAt(i)).equals('%')) || (Character.valueOf(contraseña.charAt(i)).equals('$')) || (Character.valueOf(contraseña.charAt(i)).equals('#'))){
                cont++;
            }             
        }
        return cont;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaCrearUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaCrearUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaCrearUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaCrearUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaCrearUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarFoto;
    private javax.swing.JButton btnCrearusuario;
    private javax.swing.JButton btnSalir;
    private javax.swing.JCheckBox chbAdministrador;
    private javax.swing.JCheckBox chbUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelApellido;
    private javax.swing.JLabel labelContraseña;
    private javax.swing.JLabel labelCorreo;
    private javax.swing.JLabel labelFechaN;
    private javax.swing.JLabel labelFoto;
    private javax.swing.JLabel labelImage;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelPathFoto;
    private javax.swing.JLabel labelRol;
    private javax.swing.JLabel labelTelefono;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JPasswordField txtContraseña;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtFechaNacimiento;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}